# NOTE: update this with your service name
service: eimovina-be

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-central-1
  environment:
    ALGOLIA_APP_ID: ${ssm:eimovina-be-algolia-app-id}
    ALGOLIA_ADMIN_API_KEY: ${ssm:eimovina-be-algolia-admin-api-key}
    ALGOLIA_INDEX_NAME: eimovina-be-property-index

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-eimovina-infra
  appSync:
    - ${file(appsync-api.yml)}

functions:
  syncPropertyAlgolia:
    handler: functions/syncPropertyAlgolia.main
    events:
      - stream:
          type: dynamodb
          arn: !ImportValue '${self:custom.sstApp}-PropertiesStreamArn'

  getProperties:
    handler: functions/getProperties.main
  
  confirmUserSignup:
    handler: functions/confirmUserSignup.main
    environment:
      USERS_TABLE: !ImportValue '${self:custom.sstApp}-UsersTableName'
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !ImportValue '${self:custom.sstApp}-UsersTableArn'
  
  updateUser:
    handler: functions/updateUser.main
    environment:
      USERS_TABLE: !ImportValue '${self:custom.sstApp}-UsersTableName'
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: !ImportValue '${self:custom.sstApp}-UsersTableArn'

  # loadPropertiesData:
  #   handler: scripts/loadPropertiesData.main
  #   environment:
  #     USERS_TABLE: !ImportValue '${self:custom.sstApp}-PropertiesTableName'
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action: dynamodb:UpdateItem
  #       Resource: !GetAtt PropertiesTable.Arn

resources:
  Resources:        
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: true
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    CognitoDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties: 
        Domain: eimovina-be-jole
        UserPoolId: !Ref CognitoUserPool

    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED


  