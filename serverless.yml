# NOTE: update this with your service name
service: eimovina-be

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-central-1
  environment:
    ALGOLIA_APP_ID: ${ssm:eimovina-be-algolia-app-id}
    ALGOLIA_ADMIN_API_KEY: ${ssm:eimovina-be-algolia-admin-api-key}
    ALGOLIA_INDEX_NAME: eimovina-be-property-index
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.

custom:
  appSync:
    - ${file(appsync-api.yml)}

functions:
  fetchProperties:
    handler: functions/getProperties.main
    environment:
      PROPERTIES_TABLE: !Ref PropertyTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource: 
          - !GetAtt PropertyTable.Arn
          - !Sub ${PropertyTable.Arn}/index/byPlotNumber
  
  updateAlgoliaIndex:
    handler: functions/syncPropertyAlgolia.main
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - PropertyTable
              - StreamArn

  getPropertiesAlgolia:
    handler: functions/getPropertiesAlgolia.main
  
  confirmUserSignup:
    handler: functions/confirmUserSignup.main
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn
  
  updateUser:
    handler: functions/updateUser.main
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: !GetAtt UsersTable.Arn

  # loadPropertiesData:
  #   handler: scripts/loadPropertiesData.main
  #   environment:
  #     USERS_TABLE: !Ref PropertiesTable
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action: dynamodb:UpdateItem
  #       Resource: !GetAtt PropertiesTable.Arn

resources:
  Resources:
    PropertyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        AttributeDefinitions:
          - AttributeName: realEstateListNumber
            AttributeType: S
          - AttributeName: plotNumber
            AttributeType: S  
          - AttributeName: municipalityId-submunicipalityId
            AttributeType: S
        KeySchema:
        - AttributeName: realEstateListNumber
          KeyType: HASH
        - AttributeName: municipalityId-submunicipalityId
          KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: byPlotNumber
            KeySchema:
              - AttributeName: plotNumber
                KeyType: HASH
              - AttributeName: municipalityId-submunicipalityId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: true
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED


  